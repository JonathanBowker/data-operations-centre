# File input configured to read from beginning of all CSV files
# Replace path to location where you download the GDELT data files
input {
    file {
        path => "<FULLY_QUALIFIED_PATH_TO_GDELT_FILES>/*.CSV"
        start_position => "beginning"
    }
}

# Filter using grok pattern included in this repo in patterns dir.
# Be sure to reference the path for your environment. 
# NOTE: CSV filter doesn't work even; there's a bug when using the
# 'delimeter' input that won't work for tabs in the GDELT files.
filter {
    grok {
        patterns_dir => "<FULLY_QUALIFIED_PATH_TO_PATTERNS_FILTER>"
        match => { "message" => "%{GDELT_DAILY_OUTPUT}" }
        tag_on_failure => []
    }

    date {
        locale => "en"
        match => ["Day", "YYYYMMdd"]
        timezone => "UTC"
    }
    
     mutate {
        add_field => {
            "[location][lat]" => "%{ActionGeo_Lat}"
            "[location][lon]" => "%{ActionGeo_Long}"
        }
    }
}

# Throw it in a local ElasticSearch gdelt index
output {
    elasticsearch {
        index => "gdelt"
    }
}