hsprobe.py - Probes Tor hidden services
------------------------------------------------------------------------
Copyright (c) 2014, SRI International
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

* Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.

* Neither the name of SRI International nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
------------------------------------------------------------------------

Description
-----------

This application tests whether specified Tor hidden services
(.onion addresses) are listening on specified ports and,
optionally, whether they are speaking specified protocols.
As of this version, support for HTTP and HTTPS is implemented.

Hsprobe takes an input a list of hidden services to be probed
and generates an output as a similar list of the results of each
hidden service probed.

The behavior of hsprobe is controlled by the following:

- An input specification listing the addresses of hidden services
  to probe and, optionally, for each address a port to be probed
  first; note that the ".onion" suffix should be omitted from the
  addresses; for example,

  6uajnfi4jkiyt2tl,80
  244licdlstixxook,443

  By default, hidden-service specifications are read from standard
  input and output is generated to standard output.

- A probe specification listing additional ports and, optionally,
  protocols to be tested for each hidden service.  The default
  probe specification is contained in the file "probe_spec", and
  the specification format is documented there.

- Several command-line switches and options; the command
  "./hsprobe.py -h" will list all available options.

Upon execution, hsprobe starts a Tor proxy/controller process and
then starts a number of probe threads.  Each probe thread is dedicated
to one hidden service at a time and will wait for the probe to complete
(or fail).

The output of hsprobe is a listing of the results of each completed
probe, one per line, of the following form:

<address>,<port>,<timestamp>,<status>[,<protocol>]

where <address> is the hidden service tested, <port> is the last port
probed, <timestamp> is the Unix-epoch time when the probe was first
started, <status> is the result of the probe, and <protocol> (if given)
is a protocol successfully tested.

For example,

244licdlstixxook,443,1417640223,DONE,https

indicates that the service was successfully probed on port 443
using the HTTPS protocol; in this case, the data downloaded as a result
of the protocol probe should be stored in a file named
"244licdlstixxook_443_https".

Note that hsprobe output can be used directly as the input
specification for a subsequent probe run.

The probing behavior of hsprobe is somewhat complex (and has not yet
been documented); typically, hsprobe will attempt to make a connection
to each of the specified ports until one succeeds or all have failed.
However, the exact behavior is more subtle and depends on the specific
status value returned by the Tor controller when attempting to
establish the connection.

The status values listed in the output are mostly those generated by
the Tor controller, with one exception: "STATUS_TIMEOUT" is generated
when hsprobe itself has timed out waiting for a probe to complete.
Note, in particular, that this is distinct from the Tor status value
"TIMEOUT", which indicates that Tor timed out (establishing the
circuit or waiting for the connection).  See also "Known Issues".

Please note that hsprobe is NOT a web crawler; when probing HTTP/S it
will simply issue a single "GET /" request and store the result.


Dependencies
------------

Hsprobe uses the Tor Stem library; see https://stem.torproject.org/
for information on how to download and install Stem.  Hsprobe has been
tested only with Stem version 1.2.2.

Hsprobe uses a modified version of SocksiPy (socks.py, obtained
from http://code.google.com/p/socksipy-branch/).  To avoid confusion,
this version is supplied with hsprobe, subject to the license
restrictions noted in the file socks.py.  Plese note that versions of
SocksiPy supplied with standard Linux distributions may not work
correctly.

Hsprobe also uses several standard Python libraries (such as urllib2,
httplib, zlib) that should be readily available.


Known Issues and Bugs
---------------------

It would be nice to provide greater control over probing behavior;
on the other hand, it would be easy to make that incomprehensibly
complex.

Using more than 20 probe threads per hsprobe instance is not
recommended; it appears that doing so may overwhelm the Tor
controller process.  The usual symptom of using too many probe
threads is a large number of TIMEOUT results.

If a probe thread terminates abnormally (usually by throwing an
exception that isn't caught), the entire process may become
unresponsive and require a "kill -9" to terminate.

Additional protocol tests (beyond HTTP, HTTPS) should be implemented.
