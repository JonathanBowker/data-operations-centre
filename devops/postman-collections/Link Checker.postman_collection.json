{
	"info": {
		"name": "Link Checker",
		"_postman_id": "6edd5a00-8483-4531-b94a-e35d51edf302",
		"description": "This collection will check all the links on a webpage, crawl all internal links, and report broken links (if any).\n\nClick the **Run in Postman** button to import the sample collection and environment template into your Postman app. You should now see the collection in the sidebar to the left and the environment selected in the dropdown in the top right.\n\n  [![import collection and environment](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/linkImport.png)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/linkImport.png)\n\nGet Started:\n===\n1. **Update environment**: Click the **Quick Look** icon in the top right to view and edit the environment variables. This is where you can update the values to check links on your own website. In many cases, your `root_url` will be the same as your `start_url`. However, in this example, we will use `https://www.getpostman.com/` as our `root_url`, and start checking links on `https://www.getpostman.com/docs/`. \n\n    [![environment template](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/linkEnv1.png)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/linkEnv1.png)\n\n2. **Open Postman Console**: This step is optional. If you want to see a stream of requests and view any logged statements, go to the application menu, and select `View` > `Show Postman Console` to open the console in a separate window. Do this before you send any requests or run the collection.\n\n  [![Postman Console](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/linkConsole.png)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/linkConsole.png)\n  \n3. **Run collection**: Click the right angle bracket (**>**) to expand the collection details view. Click the **Run** button to open the collection runner in a separate window. \n\n  [![collection details](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/linkCollDetails.png)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/linkCollDetails.png)\n\n  Verify that your collection and environment are selected in the respective dropdowns, and click **Start Run** to begin running your collection.\n \n  [![collection runner](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/linkCollRun.png)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/linkCollRun.png)\n\nYou should now see your tests running and passing, crawling all the links until there are no more links to check.\n\n  [![tests passing](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/linkCollRunner.png)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/linkCollRunner.png)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Initialize",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// set environment variables to default values",
							"postman.setEnvironmentVariable('links', '[]');",
							"postman.setEnvironmentVariable('url', postman.getEnvironmentVariable('start_url'));",
							"postman.setEnvironmentVariable('index', -1);"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{start_url}}",
					"host": [
						"{{start_url}}"
					]
				},
				"description": "Under the **Tests** tab, we will set a few more environment variables that will be used in the subsequent request, using the `setEnvironmentVariable()` method.\n\n  [![setEnvironmentVariable](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/linkSetEnv.png)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/linkSetEnv.png)\n"
			},
			"response": []
		},
		{
			"name": "Check URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Tests and custom scripts can be written in JavaScript.",
							"",
							"// get environment variables",
							"var start_url = postman.getEnvironmentVariable('start_url');",
							"var root_url = postman.getEnvironmentVariable('root_url');",
							"var links = JSON.parse(postman.getEnvironmentVariable('links'));",
							"var url = postman.getEnvironmentVariable('url');",
							"var index = parseInt(postman.getEnvironmentVariable('index'));",
							"",
							"// increment index counter to access links in array to check",
							"index = index + 1;",
							"",
							"// test if link works",
							"if (responseCode.code > 400) {",
							"    console.log(\"This link is broken: \", url);",
							"    tests[\"Link works\"] = false;",
							"} else {",
							"    tests[\"Link works\"] = true;",
							"}",
							"",
							"// if the current url includes the start_url, then this is an internal link and we should crawl it for more links",
							"if (url.includes(start_url)) {",
							"    ",
							"    // load the response body as HTML using cheerio, get the <a> tags",
							"    var $ = cheerio.load(responseBody);",
							"    ",
							"    $('a').each(function (index) {",
							"        ",
							"        var link = $(this).attr('href');",
							"        ",
							"        // add links to the links array if not already in there",
							"        // if you have additional links you would like to exclude, for example, ads, you can add this criteria as well",
							"        if (!links.includes(link)) {",
							"            links.push(link);",
							"        }",
							"    });",
							"}",
							"",
							"// if we've gone through all the links, return early",
							"if (links.length - 1 === index) {",
							"    console.log('no more links to check');",
							"    return;",
							"}",
							"",
							"// if link is a relative one, prepend with root_url",
							"url = links[index]",
							"if (! /^https?:\\/\\//.test(url)) {",
							"    url = root_url + url;",
							"}",
							"",
							"// update environment variable values",
							"postman.setEnvironmentVariable(\"links\", JSON.stringify(links));",
							"postman.setEnvironmentVariable(\"url\", url);",
							"postman.setEnvironmentVariable(\"index\", index);",
							"",
							"// continue calling the same request until all links are checked",
							"postman.setNextRequest('Check URL');",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				},
				"description": "This request will crawl internal links and check all links for a healthy HTTP status code that is less than 400. \n\n**HTML scraping**\n\nFinding all the links on a page requires scraping HTML. The Postman Sandbox supports **cheerio** as a library for scraping HTML elements. Read more about [using the Postman Sandbox](https://www.getpostman.com/docs/postman/scripts/postman_sandbox) and other libraries and utilities supported in the pre-request and scripts sections.\n\n[![Cheerio HTML scraping](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/scrapeLinks.png)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/scrapeLinks.png)\n\n**Building workflows**\n\nThe `setNextRequest()` method accepts a request name or id within the same collection as a parameter. Use this method to establish a workflow sequence and designate which request in the same collection to run next, instead of defaulting to the linear execution. Read more about [building workflows](https://www.getpostman.com/docs/postman/collection_runs/building_workflows).\n\nIn this example, we will continue calling the same request until all links are checked.\n\n[![setNextRequest method](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/linkSetNextRequest.png)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/linkSetNextRequest.png)"
			},
			"response": []
		}
	]
}